package others;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;

class Problem35Test {

    @Test
    void solution() throws IOException {
        Problem35 problem35 = new Problem35();
        String p = "47 20\n" +
                "1 1 0 1 1 0 1 0 1 1 0 1 1 0 1 1 1 0 1 1 \n" +
                "1 1 0 1 0 1 1 1 1 1 1 1 1 0 1 0 1 1 0 1 \n" +
                "1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 1 1 1 \n" +
                "1 1 1 1 1 1 0 1 1 0 1 0 1 1 1 1 1 1 1 0 \n" +
                "1 0 1 1 1 0 1 0 1 1 1 1 1 1 0 0 1 1 1 0 \n" +
                "1 1 1 1 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 \n" +
                "0 1 1 1 1 1 1 1 0 1 1 0 1 1 0 0 1 1 0 0 \n" +
                "1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 0 0 1 1 0 \n" +
                "1 1 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 0 1 1 \n" +
                "1 1 0 1 0 0 0 0 0 1 1 1 1 1 0 0 1 0 1 1 \n" +
                "1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 0 1 1 0 1 \n" +
                "1 0 1 1 1 1 0 1 0 1 1 1 1 1 1 0 1 0 1 1 \n" +
                "0 1 1 0 1 0 0 0 0 1 1 0 1 1 1 1 1 1 1 0 \n" +
                "1 0 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 \n" +
                "1 0 1 0 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 1 \n" +
                "0 1 0 1 1 0 0 1 0 1 1 0 0 1 0 1 1 1 1 1 \n" +
                "1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 \n" +
                "1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 0 \n" +
                "1 0 1 1 1 1 1 0 1 1 0 1 1 0 0 1 1 1 0 1 \n" +
                "1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 \n" +
                "1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 1 0 1 \n" +
                "0 1 1 1 0 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 \n" +
                "1 1 1 0 1 1 1 0 1 0 1 1 0 1 1 1 1 0 0 1 \n" +
                "1 0 0 0 1 1 1 1 0 1 1 1 1 1 0 0 1 0 1 0 \n" +
                "0 1 0 1 0 1 1 1 1 1 1 0 1 1 0 0 1 1 0 1 \n" +
                "1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 \n" +
                "0 0 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 \n" +
                "1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 1 1 0 \n" +
                "0 0 1 1 0 1 0 0 1 1 1 1 1 1 0 1 1 0 0 1 \n" +
                "0 1 0 1 1 0 1 1 1 1 0 0 0 1 1 0 0 1 1 1 \n" +
                "1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 0 0 1 \n" +
                "1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 \n" +
                "1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 0 1 1 0 \n" +
                "1 0 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 0 1 \n" +
                "1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 0 1 1 1 \n" +
                "1 1 1 0 1 1 1 0 1 0 1 1 1 0 0 1 0 0 1 1 \n" +
                "1 1 0 1 0 0 0 0 0 1 1 0 1 1 1 1 0 0 0 1 \n" +
                "0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 0 1 1 1 \n" +
                "1 0 1 1 1 0 0 0 1 1 1 1 0 1 0 1 1 1 1 1 \n" +
                "1 0 1 1 0 1 1 0 1 1 0 1 1 1 1 0 0 0 1 1 \n" +
                "0 0 0 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 0 0 \n" +
                "0 1 1 1 1 1 0 1 0 1 1 1 1 0 0 1 1 1 1 0 \n" +
                "0 1 1 1 1 1 1 0 0 0 0 0 0 0 1 0 0 1 1 1 \n" +
                "1 1 1 0 0 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 \n" +
                "1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 0 0 \n" +
                "1 1 1 0 1 0 0 1 1 0 0 1 0 1 0 1 1 0 0 1 \n" +
                "0 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 \n";
        System.setIn(new ByteArrayInputStream(p.getBytes()));
        int solution = problem35.solution();

        Assertions.assertThat(solution).isEqualTo(-1);
    }

}