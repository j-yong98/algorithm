package others;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;

class Problem38Test {

    @Test
    void solution() throws IOException {
        Problem38 problem38 = new Problem38();
        String p = "16 124 82\n" +
                "96 33 45 69 43 6 19 1 100 11 14 9 86 77 2 65 \n" +
                "40 40 68 63 64 33 29 4 72 79 62 88 51 89 76 61 \n" +
                "97 41 16 7 74 73 76 4 85 97 88 98 41 29 56 20 \n" +
                "38 10 38 50 57 44 55 35 63 40 53 56 44 11 39 91 \n" +
                "7 94 39 92 71 17 7 31 20 64 11 41 36 58 35 59 \n" +
                "88 91 67 75 46 43 89 53 89 33 16 59 31 92 78 19 \n" +
                "38 33 47 78 47 75 36 46 53 18 78 7 98 36 42 71 \n" +
                "34 19 6 5 91 2 69 17 90 21 12 81 2 15 20 42 \n" +
                "4 20 58 85 42 99 60 98 20 50 35 70 33 4 22 14 \n" +
                "13 2 11 5 94 47 17 37 74 93 92 40 26 99 20 40 \n" +
                "27 32 39 73 33 95 6 33 93 14 97 24 89 97 61 78 \n" +
                "62 73 35 85 29 30 63 48 60 15 97 68 95 9 37 73 \n" +
                "35 16 30 28 85 68 18 97 59 34 65 25 37 19 90 6 \n" +
                "73 62 76 73 48 86 54 64 26 7 49 34 35 24 77 85 \n" +
                "51 93 30 17 61 7 87 64 85 71 96 1 65 90 21 73 \n" +
                "79 6 15 50 74 55 97 86 41 1 66 98 58 45 1 46 \n" +
                "8 12\n" +
                "5 9\n" +
                "6 6\n" +
                "11 3\n" +
                "13 16\n" +
                "6 12\n" +
                "2 7\n" +
                "1 6\n" +
                "5 8\n" +
                "4 16\n" +
                "10 14\n" +
                "12 6\n" +
                "1 5\n" +
                "5 6\n" +
                "2 11\n" +
                "2 15\n" +
                "16 13\n" +
                "9 2\n" +
                "8 13\n" +
                "2 2\n" +
                "1 8\n" +
                "16 11\n" +
                "7 6\n" +
                "16 5\n" +
                "4 2\n" +
                "1 3\n" +
                "15 11\n" +
                "9 7\n" +
                "4 5\n" +
                "2 13\n" +
                "16 7\n" +
                "11 6\n" +
                "11 9\n" +
                "7 3\n" +
                "3 12\n" +
                "14 1\n" +
                "11 14\n" +
                "4 9\n" +
                "11 10\n" +
                "3 4\n" +
                "2 5\n" +
                "6 9\n" +
                "13 9\n" +
                "14 4\n" +
                "14 9\n" +
                "8 2\n" +
                "3 11\n" +
                "6 3\n" +
                "7 9\n" +
                "1 11\n" +
                "13 8\n" +
                "4 3\n" +
                "14 7\n" +
                "1 13\n" +
                "3 13\n" +
                "6 11\n" +
                "16 3\n" +
                "1 14\n" +
                "11 7\n" +
                "13 5\n" +
                "8 8\n" +
                "10 8\n" +
                "3 6\n" +
                "9 13\n" +
                "16 9\n" +
                "4 7\n" +
                "2 10\n" +
                "10 13\n" +
                "14 12\n" +
                "12 12\n" +
                "16 14\n" +
                "10 6\n" +
                "5 2\n" +
                "9 12\n" +
                "5 5\n" +
                "2 16\n" +
                "10 16\n" +
                "5 7\n" +
                "13 13\n" +
                "7 8\n" +
                "15 16\n" +
                "5 1\n" +
                "1 7\n" +
                "7 15\n" +
                "8 15\n" +
                "15 9\n" +
                "14 8\n" +
                "14 6\n" +
                "12 5\n" +
                "12 7\n" +
                "10 2\n" +
                "15 14\n" +
                "7 14\n" +
                "10 15\n" +
                "11 16\n" +
                "1 1\n" +
                "8 10\n" +
                "3 2\n" +
                "4 13\n" +
                "16 15\n" +
                "15 3\n" +
                "7 11\n" +
                "11 5\n" +
                "14 2\n" +
                "2 4\n" +
                "13 14\n" +
                "9 9\n" +
                "6 16\n" +
                "12 10\n" +
                "7 4\n" +
                "15 8\n" +
                "9 5\n" +
                "10 3\n" +
                "7 16\n" +
                "3 1\n" +
                "11 12\n" +
                "13 12\n" +
                "10 5\n" +
                "6 1\n" +
                "5 11\n" +
                "7 7\n" +
                "6 10\n" +
                "15 2\n" +
                "9 15\n";
        System.setIn(new ByteArrayInputStream(p.getBytes()));
        int solution = problem38.solution();
        Assertions.assertThat(solution).isEqualTo(31);
    }

}